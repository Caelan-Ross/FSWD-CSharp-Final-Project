// <auto-generated />
using System;
using MACK;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MACK.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230526192456_Update1")]
    partial class Update1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MACK.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("address_id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("country");

                    b.Property<int?>("DealershipId")
                        .IsRequired()
                        .HasColumnType("int(10)")
                        .HasColumnName("dealership_id");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("varchar(24)")
                        .HasColumnName("province");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("street");

                    b.HasKey("AddressId");

                    b.HasIndex("DealershipId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = -1,
                            City = "Edmonton",
                            Country = "Canada",
                            DealershipId = -1,
                            PostalCode = "A1A1A1",
                            Province = "Alberta",
                            Street = "123 Street"
                        });
                });

            modelBuilder.Entity("MACK.Models.Colour", b =>
                {
                    b.Property<int>("ColourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("colour_id");

                    b.Property<string>("ColourName")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("colour_name");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(10)")
                        .HasColumnName("vehicle_id");

                    b.HasKey("ColourId");

                    b.ToTable("Colours");

                    b.HasData(
                        new
                        {
                            ColourId = -1,
                            ColourName = "Blue",
                            VehicleId = -1
                        });
                });

            modelBuilder.Entity("MACK.Models.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("condition_id");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("condition_name");

                    b.HasKey("ConditionId");

                    b.ToTable("Conditions");

                    b.HasData(
                        new
                        {
                            ConditionId = -1,
                            ConditionName = "Used"
                        });
                });

            modelBuilder.Entity("MACK.Models.Corporation", b =>
                {
                    b.Property<int>("CorporationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("corporation_id");

                    b.Property<string>("CorporationName")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("corporation_name");

                    b.HasKey("CorporationId");

                    b.ToTable("Corporations");

                    b.HasData(
                        new
                        {
                            CorporationId = -1,
                            CorporationName = "TestCorporation"
                        });
                });

            modelBuilder.Entity("MACK.Models.Dealership", b =>
                {
                    b.Property<int>("DealershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("dealership_id");

                    b.Property<int>("AddressId")
                        .HasColumnType("int(10)")
                        .HasColumnName("address_id");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int(10)")
                        .HasColumnName("corperation_id");

                    b.Property<string>("DealershipName")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("dealership_name");

                    b.HasKey("DealershipId");

                    b.HasIndex("CorporationId");

                    b.ToTable("Dealerships");

                    b.HasData(
                        new
                        {
                            DealershipId = -1,
                            AddressId = -1,
                            CorporationId = -1,
                            DealershipName = "TestDealership"
                        });
                });

            modelBuilder.Entity("MACK.Models.Drivetrain", b =>
                {
                    b.Property<int>("DrivetrainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("drivetrain_id");

                    b.Property<string>("DrivetrainType")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("drivetrain_type");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(10)")
                        .HasColumnName("vehicle_id");

                    b.HasKey("DrivetrainId");

                    b.ToTable("Drivetrains");

                    b.HasData(
                        new
                        {
                            DrivetrainId = -1,
                            DrivetrainType = "TestDrivetrain",
                            VehicleId = -1
                        });
                });

            modelBuilder.Entity("MACK.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("manufacturer_name");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            ManufacturerId = -1,
                            ManufacturerName = "TestManufacturer"
                        });
                });

            modelBuilder.Entity("MACK.Models.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("model_id");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int(10)")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("model_name");

                    b.HasKey("ModelId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            ModelId = -1,
                            ManufacturerId = -1,
                            ModelName = "TestModel"
                        });
                });

            modelBuilder.Entity("MACK.Models.Series", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("series_id");

                    b.Property<int>("ModelId")
                        .HasColumnType("int(10)")
                        .HasColumnName("model_id");

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("series_name");

                    b.HasKey("SeriesId");

                    b.HasIndex("ModelId");

                    b.ToTable("Series");

                    b.HasData(
                        new
                        {
                            SeriesId = -1,
                            ModelId = -1,
                            SeriesName = "TestSeries"
                        });
                });

            modelBuilder.Entity("MACK.Models.Transmission", b =>
                {
                    b.Property<int>("TransmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("transmission_id");

                    b.Property<int>("TransmissionGears")
                        .HasColumnType("int(3)")
                        .HasColumnName("transmission_gears");

                    b.Property<string>("TransmissionType")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("transmission_type");

                    b.HasKey("TransmissionId");

                    b.ToTable("Transmissions");

                    b.HasData(
                        new
                        {
                            TransmissionId = -1,
                            TransmissionGears = 1,
                            TransmissionType = "TestType"
                        });
                });

            modelBuilder.Entity("MACK.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("vehicle_id");

                    b.Property<int>("BodyDoorCount")
                        .HasColumnType("int(1)")
                        .HasColumnName("body_door_count");

                    b.Property<int>("CityMPG")
                        .HasColumnType("int(3)")
                        .HasColumnName("city_mpg");

                    b.Property<int>("DrivetrainId")
                        .HasColumnType("int(10)")
                        .HasColumnName("drivetrain_id");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("engine");

                    b.Property<int>("EngineCylinderCount")
                        .HasColumnType("int(2)")
                        .HasColumnName("engine_cylinder_count");

                    b.Property<string>("EngineDisplacement")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("engine_displacement");

                    b.Property<int>("ExteriorColourId")
                        .HasColumnType("int(10)");

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("fuel");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("height");

                    b.Property<int>("HighwayMPG")
                        .HasColumnType("int(3)")
                        .HasColumnName("highway_mpg");

                    b.Property<int>("InteriorColourId")
                        .HasColumnType("int(10)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("length");

                    b.Property<int?>("SeriesId")
                        .IsRequired()
                        .HasColumnType("int(10)")
                        .HasColumnName("series_id");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int(10)")
                        .HasColumnName("transmission_id");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar(18)")
                        .HasColumnName("vin");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int(10)")
                        .HasColumnName("vehicle_type_id");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("weight");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("width");

                    b.Property<int>("Year")
                        .HasColumnType("int(4)")
                        .HasColumnName("model_year");

                    b.HasKey("VehicleId");

                    b.HasIndex("DrivetrainId");

                    b.HasIndex("ExteriorColourId");

                    b.HasIndex("InteriorColourId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TransmissionId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = -1,
                            BodyDoorCount = 1,
                            CityMPG = 1,
                            DrivetrainId = -1,
                            Engine = "TestEngine",
                            EngineCylinderCount = 1,
                            EngineDisplacement = "TestDisplacment",
                            ExteriorColourId = -1,
                            Fuel = "TestFuel",
                            Height = 1m,
                            HighwayMPG = 1,
                            InteriorColourId = -1,
                            Length = 1m,
                            SeriesId = -1,
                            TransmissionId = -1,
                            VIN = "11111111111111111",
                            VehicleTypeId = -1,
                            Weight = 1m,
                            Width = 1m,
                            Year = 2000
                        });
                });

            modelBuilder.Entity("MACK.Models.VehicleListing", b =>
                {
                    b.Property<int>("ListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("listing_id");

                    b.Property<int>("Age")
                        .HasColumnType("int(3)")
                        .HasColumnName("age");

                    b.Property<bool>("Certified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("certified");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int(10)")
                        .HasColumnName("condition_id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("DealershipId")
                        .HasColumnType("int(10)")
                        .HasColumnName("dealership_id");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("description");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("features");

                    b.Property<DateTime>("InventoryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("inventory_date");

                    b.Property<int>("MSRP")
                        .HasColumnType("int(7)")
                        .HasColumnName("msrp");

                    b.Property<int>("Odometer")
                        .HasColumnType("int(7)")
                        .HasColumnName("odometer");

                    b.Property<string>("PhotoUrlList")
                        .IsRequired()
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("photo_url_list");

                    b.Property<DateTime>("PhotosLastModifiedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("photos_last_modified_date");

                    b.Property<int>("Price")
                        .HasColumnType("int(7)")
                        .HasColumnName("price");

                    b.Property<string>("StockNumber")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("stock_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar(18)")
                        .HasColumnName("vin");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int(10)")
                        .HasColumnName("vehicle_id");

                    b.HasKey("ListingId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("DealershipId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleListings");

                    b.HasData(
                        new
                        {
                            ListingId = -1,
                            Age = 1,
                            Certified = true,
                            ConditionId = -1,
                            Cost = 1m,
                            CreatedAt = new DateTime(2023, 5, 26, 14, 24, 56, 185, DateTimeKind.Local).AddTicks(6746),
                            DealershipId = -1,
                            DeletedAt = new DateTime(2023, 5, 26, 14, 24, 56, 185, DateTimeKind.Local).AddTicks(6749),
                            Description = "TestDescription",
                            Features = "TestFeatures",
                            InventoryDate = new DateTime(2023, 5, 26, 14, 24, 56, 185, DateTimeKind.Local).AddTicks(6707),
                            MSRP = 1,
                            Odometer = 1,
                            PhotoUrlList = "TestPhotoList",
                            PhotosLastModifiedDate = new DateTime(2023, 5, 26, 14, 24, 56, 185, DateTimeKind.Local).AddTicks(6744),
                            Price = 1,
                            StockNumber = "Test",
                            UpdatedAt = new DateTime(2023, 5, 26, 14, 24, 56, 185, DateTimeKind.Local).AddTicks(6747),
                            VIN = "11111111111111111",
                            VehicleId = -1
                        });
                });

            modelBuilder.Entity("MACK.Models.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("vehicle_type_id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("type_name");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            VehicleTypeId = -1,
                            TypeName = "TestType"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MACK.Models.Address", b =>
                {
                    b.HasOne("MACK.Models.Dealership", "Dealership")
                        .WithOne("Address")
                        .HasForeignKey("MACK.Models.Address", "DealershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dealership");
                });

            modelBuilder.Entity("MACK.Models.Dealership", b =>
                {
                    b.HasOne("MACK.Models.Corporation", "Corporation")
                        .WithMany("Dealerships")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("MACK.Models.Model", b =>
                {
                    b.HasOne("MACK.Models.Manufacturer", "Manufacturer")
                        .WithMany("Models")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("MACK.Models.Series", b =>
                {
                    b.HasOne("MACK.Models.Model", "Model")
                        .WithMany("Series")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MACK.Models.Vehicle", b =>
                {
                    b.HasOne("MACK.Models.Drivetrain", "Drivetrain")
                        .WithMany("Vehicles")
                        .HasForeignKey("DrivetrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MACK.Models.Colour", "ExteriorColour")
                        .WithMany("ExteriorVehicles")
                        .HasForeignKey("ExteriorColourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MACK.Models.Colour", "InteriorColour")
                        .WithMany("InteriorVehicles")
                        .HasForeignKey("InteriorColourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MACK.Models.Series", "Series")
                        .WithMany("Vehicles")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MACK.Models.Transmission", "Transmission")
                        .WithMany("Vehicles")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MACK.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drivetrain");

                    b.Navigation("ExteriorColour");

                    b.Navigation("InteriorColour");

                    b.Navigation("Series");

                    b.Navigation("Transmission");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("MACK.Models.VehicleListing", b =>
                {
                    b.HasOne("MACK.Models.Condition", "Condition")
                        .WithMany("VehicleListings")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MACK.Models.Dealership", "Dealership")
                        .WithMany("VehicleListings")
                        .HasForeignKey("DealershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MACK.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleListings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("Dealership");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MACK.Models.Colour", b =>
                {
                    b.Navigation("ExteriorVehicles");

                    b.Navigation("InteriorVehicles");
                });

            modelBuilder.Entity("MACK.Models.Condition", b =>
                {
                    b.Navigation("VehicleListings");
                });

            modelBuilder.Entity("MACK.Models.Corporation", b =>
                {
                    b.Navigation("Dealerships");
                });

            modelBuilder.Entity("MACK.Models.Dealership", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("VehicleListings");
                });

            modelBuilder.Entity("MACK.Models.Drivetrain", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MACK.Models.Manufacturer", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("MACK.Models.Model", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("MACK.Models.Series", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MACK.Models.Transmission", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MACK.Models.Vehicle", b =>
                {
                    b.Navigation("VehicleListings");
                });

            modelBuilder.Entity("MACK.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
